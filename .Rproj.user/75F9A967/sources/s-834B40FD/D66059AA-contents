---
title: "DRUID on biobank tumor tissue data"
author: "Jineta Banerjee"
date: '`r format(Sys.time(), "%d %B, %Y")`'
output: 
  html_document:
    toc: true
    number_sections: true
    toc_float:
      collapsed: false
      smooth_scroll: false
    fig_width: 7
    fig_height: 6
    fig_caption: true
    df_print: paged
    code_folding: hide
---


```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
 
```{r lib_synapser, echo=FALSE, eval=TRUE, results='hide', message=FALSE, warning=FALSE}

library(synapser)
library(BiocManager)
library(gProfileR)
library(GOsummaries)
library(tidyverse)
library(ggfortify)
library(GSVA)
library(GSVAdata)
library(biomartr)
library(pheatmap)
library(biomaRt)
library(glue)
library(edgeR)
library(limma)
library(sagethemes)
import_lato()
library(DRUID)
library(cauldron)
library(AnnotationDbi)
library(org.Hs.eg.db)
library(DT)

library(synapser)
synapser::synLogin()
```
## Download the data

We use the publicly available JHU Biobank RNASeq data stored in project : syn20812185 for this analysis.
```{r download data}

NTAP_published_files <- synapser::synTableQuery(glue::glue("SELECT * FROM syn21221980"))$asDataFrame()

NTAP_pub_rnaseq_data <- synapser::synTableQuery(glue::glue("SELECT * FROM syn20812185"))$asDataFrame() %>% 
  dplyr::select(totalCounts, Symbol, zScore, specimenID, individualID, sex, tumorType, studyName)

NTAP_pub_rnaseq_data$sex[NTAP_pub_rnaseq_data$sex == "female"] <- "Female"
NTAP_pub_rnaseq_data$sex[NTAP_pub_rnaseq_data$sex == "male"] <- "Male"
NTAP_pub_rnaseq_data$tumorType[NTAP_pub_rnaseq_data$tumorType == "Malignant peripheral nerve sheath tumor"] <- "Malignant Peripheral Nerve Sheath Tumor"

NTAP_pub_rnaseq_data <- NTAP_pub_rnaseq_data %>% 
  filter(tumorType %in% c("Cutaneous Neurofibroma", "Plexiform Neurofibroma", "Neurofibroma", "Malignant Peripheral Nerve Sheath Tumor"),
         !grepl('xenograft', specimenID, ignore.case = T),
         !grepl('Cell Line', specimenID, ignore.case = T),
         !specimenID %in% c("BI386-004","CW225-001","DW356-002",
                            "JK368-003", "SK436-005"))


```


We then use TMM normalization to prepare the dataset for differential gene expression analysis.
```{r TMM-LCPM normalization, eval=TRUE, results='hide', message=FALSE, warning=FALSE}

gene_mat<-reshape2::acast(unique(NTAP_pub_rnaseq_data),
                          Symbol~specimenID,
                          value.var='totalCounts',
                          fun.aggregate = mean)

# missing<-which(apply(gene_mat,1,function(x) any(is.na(x))))
# gene_mat<-gene_mat[-missing,]

DGE.all <-DGEList(counts=gene_mat) # function from edgeR

```

&nbsp;

## Differential gene expression analysis in samples:

We used limma-edgeR based analysis to find differentially expressed genes in the TMM normalized dataset. 

A point to note:

*  All MPNST samples except one are males while all PNF samples except one are femmales. So there may be a sex related effect on the analysis that we dont have a good way to mitigate. 

The plot below shows genes that are significantly overexpressed in MPNST compared to PNF (logFC > 4) in red. The dots in blue refer to genes that are significantly underexpressed in MPNST compared to PNF (logFC < -4). The thresholds of fold change have been arbitrarily chosen for ease of visualization in the volcano plot shown below.

```{r DEG, echo=T, eval= TRUE, results='hide', message=FALSE, warning=FALSE, fig.height=20, fig.width=20}

#Select annotations
annotes=NTAP_pub_rnaseq_data %>%
  dplyr::select(specimenID,sex,tumorType,studyName) %>%
  unique()
annotes$tumorType <- as.factor(annotes$tumorType)
annotes$sex <-as.factor(annotes$sex)
rownames(annotes)<-annotes$specimenID

## DEG analysis using limma, Glimma and EdgeR

limma_object <- DGE.all  # make new DGElist object so that we dont change the original object

#make design matrix
annotes <- annotes %>% 
  dplyr::filter(specimenID %in% colnames(gene_mat)) 
ordered_annotes <- annotes[match(colnames(gene_mat), annotes$specimenID),]
group_object <- ordered_annotes$tumorType
batch <- ordered_annotes$studyName
sex <- ordered_annotes$sex

design_new <- model.matrix(~0+group_object)
colnames(design_new) <- gsub("group_object", "", colnames(design_new)) # modify the colnames to remove "group_object" addition
colnames(design_new) <- gsub(" ", "_", colnames(design_new))
colnames(design_new) <- gsub("-", "_", colnames(design_new))


contr.matrix <- makeContrasts(
   MPNSTvsPNF = Malignant_Peripheral_Nerve_Sheath_Tumor - Plexiform_Neurofibroma,
   levels = colnames(design_new))
#contr.matrix

## Using voom to make Elist object
#print("Visualizing the mean variance trend of the RNASeq dataset")
voom_object <- voomWithQualityWeights(limma_object, design_new, plot=FALSE) # removing heteroscadisticity
#voom_object$genes <- genes_unique

## Run DGE analysis using lmFit

fit_new <- lmFit(voom_object, design_new)
contrast_fit_new <- contrasts.fit(fit_new, contrasts=contr.matrix)
fit <- eBayes(contrast_fit_new, trend=TRUE)
#glmfit <- glmQLFit(voom_object, design_new)
#qlf <- glmQLFTest(glmfit, contrast=contr.matrix)

results_fit_new <- decideTests(fit)
#summary(results_fit_new)

#vennDiagram(results_fit_new[,c(1)], circle.col=c("turquoise", "salmon"))
MPNSTvsPNF <- topTreat(fit, coef=1, n=Inf)
MPNSTvsPNF$Genes <- rownames(MPNSTvsPNF)
MPNSTvsPNF_ordered <- MPNSTvsPNF[order(MPNSTvsPNF$adj.P.Val),]

## Volcano Plots:

MPNSTvsPNF_ordered <-MPNSTvsPNF_ordered %>%
  mutate(threshold = ifelse(logFC >= 4 & adj.P.Val <= 0.05,"A", ifelse(logFC<=-4 & adj.P.Val <= 0.05, "B", "C")))

# theme_update(legend.text = element_text(size=10), 
#       axis.text.x  = element_text(size=40),
#       axis.text.y = element_text(size=40),
#       text = element_text(size=50),
#       legend.position = "none")
ggplot(data=MPNSTvsPNF_ordered, aes(x=logFC, y=-log10(adj.P.Val))) +
  geom_point(aes(colour = threshold), alpha=0.4, size=5) +
  xlim(c(-10, 10)) + ylim(c(0, 2)) +
  xlab("log2 fold change") + ylab("-log10 adjusted Pvalue") +
  scale_colour_manual(values = c("A"= "red", "B"="blue",  "C"= "black")) +
  geom_text(aes(label = ifelse(threshold != "C", 
                               as.character(Genes), ""), 
                colour = as.factor(threshold)), size = 5, angle = 45, hjust = -0.25) +
  theme_bw()+
  theme(legend.text = element_text(size=10), #element_text(size=8),
              axis.text.x  = element_text(size=30, angle = 45),
              axis.text.y = element_text(size=30),
              text = element_text(size=40),
              strip.text.x = element_text(size = 30),
              legend.position="none",
              panel.grid = element_blank(),
              panel.background = element_rect(fill = "white")) 

```


```{r DRUID, fig.height=10, fig.width=15}


druid_dge <- MPNSTvsPNF %>% 
  dplyr::select(c("logFC","adj.P.Val")) %>% 
  dplyr::filter(MPNSTvsPNF$adj.P.Val < 0.05)
  
query_matrix <- as.matrix(druid_dge)


# Convert the gene names to entrez ids
geneSymbols <- AnnotationDbi::mapIds(org.Hs.eg.db, keys=rownames(query_matrix), column=c("ENTREZID"), keytype="SYMBOL", multiVals = "first") %>% as.data.frame()
head(geneSymbols)
entrez_ids <- geneSymbols$.

# #Run Druid with only significant genes (adj_p_val < 0.05)
# sig_genes_druid <- concoct(dge_matrix = query_matrix, 
#                            num_random = 10000, 
#                            druid_direction = "neg", 
#                            fold_thr = 0.5, 
#                            pvalue_thr = 0.05, 
#                            entrez = entrez_ids)
# sig_genes_druid_ordered <- sig_genes_druid[order(sig_genes_druid$druid_score, decreasing = TRUE),]
# #head(sig_genes_druid_ordered)
# 
# save(sig_genes_druid_ordered, file = "/Users/jineta/git/gitrepo/GSVA/sig_genes_druid_mpnst_pnf.RData")

load("/Users/jineta/git/gitrepo/GSVA/sig_genes_druid_mpnst_pnf.RData")

DT::datatable(sig_genes_druid_ordered[1:50,c("drug_name", "matched_genes", "druid_score", "probability_random","cell_line")])

sig_genes_druid %>% 
  dplyr::filter(., druid_score > 5) %>% 
  ggplot() + 
  geom_point(aes(x = drug_name, y = cosine_similarity, color = cell_line), alpha = 0.5) + 
  facet_grid(. ~ cell_line, scales = "free") + 
  theme_bw() + 
  theme(axis.text.x = element_text(angle = 45))

```
```{r DRUID allgenes, fig.height=10, fig.width=15}

druid_dge_all <- MPNSTvsPNF %>% 
  dplyr::select(c("logFC","adj.P.Val")) 
  
query_matrix <- as.matrix(druid_dge_all)


# Convert the gene names to entrez ids
geneSymbols <- AnnotationDbi::mapIds(org.Hs.eg.db, keys=rownames(query_matrix), column=c("ENTREZID"), keytype="SYMBOL", multiVals = "first") %>% as.data.frame()
head(geneSymbols)
entrez_ids <- geneSymbols$.

# #Run Druid with all genes 
# all_genes_druid <- concoct(dge_matrix = query_matrix, 
#                            num_random = 10000, 
#                            druid_direction = "neg", 
#                            fold_thr = 0.5, 
#                            pvalue_thr = 0.05, 
#                            entrez = entrez_ids)
# all_genes_druid_ordered <- all_genes_druid[order(all_genes_druid$druid_score, decreasing = TRUE),]
# #head(sig_genes_druid_ordered)
# 
# save(all_genes_druid_ordered, file = "/Users/jineta/git/gitrepo/GSVA/all_genes_druid_mpnst_pnf.RData")

load("/Users/jineta/git/gitrepo/GSVA/all_genes_druid_mpnst_pnf.RData")

DT::datatable(sig_genes_druid_ordered[1:50,c("drug_name", "matched_genes", "druid_score", "probability_random","cell_line")])

sig_genes_druid %>% 
  dplyr::filter(., druid_score > 5) %>% 
  ggplot() + 
  geom_point(aes(x = drug_name, y = cosine_similarity, color = cell_line), alpha = 0.5) + 
  facet_grid(. ~ cell_line, scales = "free") + 
  theme_bw() + 
  theme(axis.text.x = element_text(angle = 45))

```
